values:
  source:
    fn::open::schema:
      "null": null
      boolean: true
      "false": false
      "true": true
      number: 42
      pi: 3.14
      string: esc
      hello: hello
      array: [ 2, items, { some: object }, [ array ] ]
      tuple: [ hello, world ]
      map: { hello: world, blue: 42 }
      record: { foo: bar }
      anyOf: hello
      oneOf: 42
      ref: { baz: qux }
      const-array: [ hello, 42 ]
      const-object: { hello: world }
      enum: foo
      always: {}
      double: [ hello, 42 ]
      triple: [ hello, 42, true ]
      dependentReq: { foo: bar, bar: 42 }
      multiple: 4
      minimum: 1
      exclusiveMinimum: 2
      maximum: 1
      exclusiveMaximum: 0
      minLength: a
      maxLength: a
      pattern: foo42
      minProperties: { foo: bar }
      maxProperties: { foo: bar }
  sink:
    fn::open::schema:
      boolean: ${source.null}
      string: ${source.array}
      number: ${source.record}
      record: ${source.always}
      anyOf: ${source.false}
      oneOf: ${source.false}
      const-array: ${source.string}
      const-object: ${source.string}
      enum: ${source.string}
      double: ${source.triple}
      triple: ${source.double}
      dependentReq: ${source.record}
      multiple: ${source.pi}
      minimum: ${source.exclusiveMaximum}
      exclusiveMinimum: ${source.minimum}
      maximum: ${source.exclusiveMinimum}
      exclusiveMaximum: ${source.maximum}
      minLength: ""
      maxLength: ${source.string}
      pattern: ${source.string}
      minItems: ${source.double}
      maxItems: ${source.triple}
      minProperties: ${source.always}
      maxProperties: ${source.dependentReq}
