/* tslint:disable */
/* eslint-disable */
// Copyright 2024, Pulumi Corporation.  All rights reserved.

/**
 * ESC (Environments, Secrets, Config) API
 * Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Access
 */
export interface Access {
    /**
     * 
     * @type {Range}
     * @memberof Access
     */
    'receiver'?: Range;
    /**
     * 
     * @type {Array<Accessor>}
     * @memberof Access
     */
    'accessors'?: Array<Accessor>;
}
/**
 * 
 * @export
 * @interface Accessor
 */
export interface Accessor {
    /**
     * 
     * @type {number}
     * @memberof Accessor
     */
    'index'?: number;
    /**
     * 
     * @type {string}
     * @memberof Accessor
     */
    'key': string;
    /**
     * 
     * @type {Range}
     * @memberof Accessor
     */
    'range': Range;
}
/**
 * 
 * @export
 * @interface CheckEnvironment
 */
export interface CheckEnvironment {
    /**
     * 
     * @type {{ [key: string]: Expr; }}
     * @memberof CheckEnvironment
     */
    'exprs'?: { [key: string]: Expr; };
    /**
     * 
     * @type {{ [key: string]: Value; }}
     * @memberof CheckEnvironment
     */
    'properties'?: { [key: string]: Value; };
    /**
     * 
     * @type {object}
     * @memberof CheckEnvironment
     */
    'schema'?: object;
    /**
     * 
     * @type {EvaluatedExecutionContext}
     * @memberof CheckEnvironment
     */
    'executionContext'?: EvaluatedExecutionContext;
    /**
     * 
     * @type {Array<EnvironmentDiagnostic>}
     * @memberof CheckEnvironment
     */
    'diagnostics'?: Array<EnvironmentDiagnostic>;
}
/**
 * 
 * @export
 * @interface Environment
 */
export interface Environment {
    /**
     * 
     * @type {{ [key: string]: Expr; }}
     * @memberof Environment
     */
    'exprs'?: { [key: string]: Expr; };
    /**
     * 
     * @type {{ [key: string]: Value; }}
     * @memberof Environment
     */
    'properties'?: { [key: string]: Value; };
    /**
     * 
     * @type {any}
     * @memberof Environment
     */
    'schema'?: any;
    /**
     * 
     * @type {EvaluatedExecutionContext}
     * @memberof Environment
     */
    'executionContext'?: EvaluatedExecutionContext;
}
/**
 * 
 * @export
 * @interface EnvironmentDefinition
 */
export interface EnvironmentDefinition {
    /**
     * 
     * @type {Array<string>}
     * @memberof EnvironmentDefinition
     */
    'imports'?: Array<string>;
    /**
     * 
     * @type {EnvironmentDefinitionValues}
     * @memberof EnvironmentDefinition
     */
    'values'?: EnvironmentDefinitionValues;
}
/**
 * 
 * @export
 * @interface EnvironmentDefinitionValues
 */
export interface EnvironmentDefinitionValues {
    [key: string]: object | any;

    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof EnvironmentDefinitionValues
     */
    'pulumiConfig'?: { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EnvironmentDefinitionValues
     */
    'environmentVariables'?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EnvironmentDefinitionValues
     */
    'files'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface EnvironmentDiagnostic
 */
export interface EnvironmentDiagnostic {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof EnvironmentDiagnostic
     */
    'summary': string;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentDiagnostic
     */
    'path'?: string;
    /**
     * 
     * @type {Range}
     * @memberof EnvironmentDiagnostic
     */
    'range'?: Range;
}
/**
 * 
 * @export
 * @interface EnvironmentDiagnostics
 */
export interface EnvironmentDiagnostics {
    /**
     * 
     * @type {Array<EnvironmentDiagnostic>}
     * @memberof EnvironmentDiagnostics
     */
    'diagnostics'?: Array<EnvironmentDiagnostic>;
}
/**
 * 
 * @export
 * @interface EvaluatedExecutionContext
 */
export interface EvaluatedExecutionContext {
    /**
     * 
     * @type {{ [key: string]: Value; }}
     * @memberof EvaluatedExecutionContext
     */
    'properties'?: { [key: string]: Value; };
    /**
     * 
     * @type {any}
     * @memberof EvaluatedExecutionContext
     */
    'schema'?: any;
}
/**
 * 
 * @export
 * @interface Expr
 */
export interface Expr {
    /**
     * 
     * @type {Range}
     * @memberof Expr
     */
    'range'?: Range;
    /**
     * 
     * @type {Expr}
     * @memberof Expr
     */
    'base'?: Expr;
    /**
     * 
     * @type {any}
     * @memberof Expr
     */
    'schema'?: any;
    /**
     * 
     * @type {{ [key: string]: Range; }}
     * @memberof Expr
     */
    'keyRanges'?: { [key: string]: Range; };
    /**
     * 
     * @type {any}
     * @memberof Expr
     */
    'literal'?: any;
    /**
     * 
     * @type {Array<Interpolation>}
     * @memberof Expr
     */
    'interpolate'?: Array<Interpolation>;
    /**
     * 
     * @type {Array<PropertyAccessor>}
     * @memberof Expr
     */
    'symbol'?: Array<PropertyAccessor>;
    /**
     * 
     * @type {Array<Access>}
     * @memberof Expr
     */
    'access'?: Array<Access>;
    /**
     * 
     * @type {Array<Expr>}
     * @memberof Expr
     */
    'list'?: Array<Expr>;
    /**
     * 
     * @type {{ [key: string]: Expr; }}
     * @memberof Expr
     */
    'object'?: { [key: string]: Expr; };
    /**
     * 
     * @type {ExprBuiltin}
     * @memberof Expr
     */
    'builtin'?: ExprBuiltin;
}
/**
 * 
 * @export
 * @interface ExprBuiltin
 */
export interface ExprBuiltin {
    /**
     * 
     * @type {string}
     * @memberof ExprBuiltin
     */
    'name': string;
    /**
     * 
     * @type {Range}
     * @memberof ExprBuiltin
     */
    'nameRange'?: Range;
    /**
     * 
     * @type {any}
     * @memberof ExprBuiltin
     */
    'argSchema'?: any;
    /**
     * 
     * @type {Expr}
     * @memberof ExprBuiltin
     */
    'arg'?: Expr;
}
/**
 * 
 * @export
 * @interface Interpolation
 */
export interface Interpolation {
    /**
     * 
     * @type {string}
     * @memberof Interpolation
     */
    'text': string;
    /**
     * 
     * @type {Array<PropertyAccessor>}
     * @memberof Interpolation
     */
    'value'?: Array<PropertyAccessor>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
}
/**
 * 
 * @export
 * @interface OpenEnvironment
 */
export interface OpenEnvironment {
    /**
     * Open environment session identifier
     * @type {string}
     * @memberof OpenEnvironment
     */
    'id': string;
    /**
     * 
     * @type {EnvironmentDiagnostics}
     * @memberof OpenEnvironment
     */
    'diagnostics'?: EnvironmentDiagnostics;
}
/**
 * 
 * @export
 * @interface OrgEnvironment
 */
export interface OrgEnvironment {
    /**
     * 
     * @type {string}
     * @memberof OrgEnvironment
     */
    'organization'?: string;
    /**
     * 
     * @type {string}
     * @memberof OrgEnvironment
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof OrgEnvironment
     */
    'created': string;
    /**
     * 
     * @type {string}
     * @memberof OrgEnvironment
     */
    'modified': string;
}
/**
 * 
 * @export
 * @interface OrgEnvironments
 */
export interface OrgEnvironments {
    /**
     * 
     * @type {Array<OrgEnvironment>}
     * @memberof OrgEnvironments
     */
    'environments'?: Array<OrgEnvironment>;
    /**
     * 
     * @type {string}
     * @memberof OrgEnvironments
     */
    'nextToken'?: string;
}
/**
 * 
 * @export
 * @interface Pos
 */
export interface Pos {
    /**
     * Line is the source code line where this position points. Lines are counted starting at 1 and incremented for each newline character encountered.
     * @type {number}
     * @memberof Pos
     */
    'line': number;
    /**
     * Column is the source code column where this position points. Columns are counted in visual cells starting at 1, and are incremented roughly per grapheme cluster encountered.
     * @type {number}
     * @memberof Pos
     */
    'column': number;
    /**
     * Byte is the byte offset into the file where the indicated position begins.
     * @type {number}
     * @memberof Pos
     */
    'byte': number;
}
/**
 * 
 * @export
 * @interface PropertyAccessor
 */
export interface PropertyAccessor {
    /**
     * 
     * @type {number}
     * @memberof PropertyAccessor
     */
    'index'?: number;
    /**
     * 
     * @type {string}
     * @memberof PropertyAccessor
     */
    'key': string;
    /**
     * 
     * @type {Range}
     * @memberof PropertyAccessor
     */
    'range': Range;
    /**
     * 
     * @type {Range}
     * @memberof PropertyAccessor
     */
    'value'?: Range;
}
/**
 * 
 * @export
 * @interface Range
 */
export interface Range {
    /**
     * 
     * @type {string}
     * @memberof Range
     */
    'environment': string;
    /**
     * 
     * @type {Pos}
     * @memberof Range
     */
    'begin': Pos;
    /**
     * 
     * @type {Pos}
     * @memberof Range
     */
    'end': Pos;
}
/**
 * 
 * @export
 * @interface Reference
 */
export interface Reference {
    /**
     * 
     * @type {string}
     * @memberof Reference
     */
    '$ref': string;
}
/**
 * 
 * @export
 * @interface Trace
 */
export interface Trace {
    /**
     * 
     * @type {Range}
     * @memberof Trace
     */
    'def'?: Range;
    /**
     * 
     * @type {Value}
     * @memberof Trace
     */
    'base'?: Value;
}
/**
 * 
 * @export
 * @interface Value
 */
export interface Value {
    /**
     * 
     * @type {any}
     * @memberof Value
     */
    'value': any;
    /**
     * 
     * @type {boolean}
     * @memberof Value
     */
    'secret'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Value
     */
    'unknown'?: boolean;
    /**
     * 
     * @type {Trace}
     * @memberof Value
     */
    'trace': Trace;
}

/**
 * EscApi - axios parameter creator
 * @export
 */
export const EscApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Checks an environment definition for errors
         * @summary Checks an environment definition for errors
         * @param {string} orgName Organization name
         * @param {string} body Environment Yaml content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEnvironmentYaml: async (orgName: string, body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('checkEnvironmentYaml', 'orgName', orgName)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('checkEnvironmentYaml', 'body', body)
            const localVarPath = `/environments/{orgName}/yaml/check`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/x-yaml';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk'
            localVarHeaderParameter['User-Agent'] = 'esc-sdk/ts/0.8.3-dev.0'
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an environment in the given org with the given name.
         * @summary Create a new environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironment: async (orgName: string, envName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('createEnvironment', 'orgName', orgName)
            // verify required parameter 'envName' is not null or undefined
            assertParamExists('createEnvironment', 'envName', envName)
            const localVarPath = `/environments/{orgName}/{envName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk'
            localVarHeaderParameter['User-Agent'] = 'esc-sdk/ts/0.8.3-dev.0'
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reads the definition for the given environment with static secrets in plaintext
         * @summary Reads the definition for the given environment with static secrets in plaintext
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decryptEnvironment: async (orgName: string, envName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('decryptEnvironment', 'orgName', orgName)
            // verify required parameter 'envName' is not null or undefined
            assertParamExists('decryptEnvironment', 'envName', envName)
            const localVarPath = `/environments/{orgName}/{envName}/decrypt`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk'
            localVarHeaderParameter['User-Agent'] = 'esc-sdk/ts/0.8.3-dev.0'
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an environment
         * @summary Delete an environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironment: async (orgName: string, envName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('deleteEnvironment', 'orgName', orgName)
            // verify required parameter 'envName' is not null or undefined
            assertParamExists('deleteEnvironment', 'envName', envName)
            const localVarPath = `/environments/{orgName}/{envName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk'
            localVarHeaderParameter['User-Agent'] = 'esc-sdk/ts/0.8.3-dev.0'
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Read an environment
         * @summary Read an environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironment: async (orgName: string, envName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('getEnvironment', 'orgName', orgName)
            // verify required parameter 'envName' is not null or undefined
            assertParamExists('getEnvironment', 'envName', envName)
            const localVarPath = `/environments/{orgName}/{envName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk'
            localVarHeaderParameter['User-Agent'] = 'esc-sdk/ts/0.8.3-dev.0'
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the ETag for the given environment if it exists.
         * @summary Return an Environment ETag
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentETag: async (orgName: string, envName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('getEnvironmentETag', 'orgName', orgName)
            // verify required parameter 'envName' is not null or undefined
            assertParamExists('getEnvironmentETag', 'envName', envName)
            const localVarPath = `/environments/{orgName}/{envName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk'
            localVarHeaderParameter['User-Agent'] = 'esc-sdk/ts/0.8.3-dev.0'
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List environments in the organization available to the current user
         * @summary List environments in the organization
         * @param {string} orgName Organization name
         * @param {string} [continuationToken] continuation Token from previous query to fetch next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironments: async (orgName: string, continuationToken?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('listEnvironments', 'orgName', orgName)
            const localVarPath = `/environments/{orgName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuationToken'] = continuationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk'
            localVarHeaderParameter['User-Agent'] = 'esc-sdk/ts/0.8.3-dev.0'
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Opens a session the given environment for the indicated duration. This returns a session id that can be used to then read values. The default duration is 1 hour.
         * @summary Open an environment session
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {string} [duration] open duration - A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openEnvironment: async (orgName: string, envName: string, duration?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('openEnvironment', 'orgName', orgName)
            // verify required parameter 'envName' is not null or undefined
            assertParamExists('openEnvironment', 'envName', envName)
            const localVarPath = `/environments/{orgName}/{envName}/open`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk'
            localVarHeaderParameter['User-Agent'] = 'esc-sdk/ts/0.8.3-dev.0'
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reads and decrypts secrets including retrieving dynamic secrets from providers.
         * @summary Read an open environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {string} openSessionID Open session ID returned from environment open
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOpenEnvironment: async (orgName: string, envName: string, openSessionID: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('readOpenEnvironment', 'orgName', orgName)
            // verify required parameter 'envName' is not null or undefined
            assertParamExists('readOpenEnvironment', 'envName', envName)
            // verify required parameter 'openSessionID' is not null or undefined
            assertParamExists('readOpenEnvironment', 'openSessionID', openSessionID)
            const localVarPath = `/environments/{orgName}/{envName}/open/{openSessionID}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)))
                .replace(`{${"openSessionID"}}`, encodeURIComponent(String(openSessionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk'
            localVarHeaderParameter['User-Agent'] = 'esc-sdk/ts/0.8.3-dev.0'
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reads and decrypts secrets including retrieving dynamic secrets from providers.
         * @summary Read an open environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {string} openSessionID Open session ID returned from environment open
         * @param {string} property Path to a specific property using Pulumi path syntax https://www.pulumi.com/docs/concepts/config/#structured-configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOpenEnvironmentProperty: async (orgName: string, envName: string, openSessionID: string, property: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('readOpenEnvironmentProperty', 'orgName', orgName)
            // verify required parameter 'envName' is not null or undefined
            assertParamExists('readOpenEnvironmentProperty', 'envName', envName)
            // verify required parameter 'openSessionID' is not null or undefined
            assertParamExists('readOpenEnvironmentProperty', 'openSessionID', openSessionID)
            // verify required parameter 'property' is not null or undefined
            assertParamExists('readOpenEnvironmentProperty', 'property', property)
            const localVarPath = `/environments/{orgName}/{envName}/open//{openSessionID}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)))
                .replace(`{${"openSessionID"}}`, encodeURIComponent(String(openSessionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (property !== undefined) {
                localVarQueryParameter['property'] = property;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk'
            localVarHeaderParameter['User-Agent'] = 'esc-sdk/ts/0.8.3-dev.0'
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates and updates the given environment\'s definition.
         * @summary Update an existing environment with Yaml file
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {string} body Environment Yaml content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentYaml: async (orgName: string, envName: string, body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgName' is not null or undefined
            assertParamExists('updateEnvironmentYaml', 'orgName', orgName)
            // verify required parameter 'envName' is not null or undefined
            assertParamExists('updateEnvironmentYaml', 'envName', envName)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateEnvironmentYaml', 'body', body)
            const localVarPath = `/environments/{orgName}/{envName}`
                .replace(`{${"orgName"}}`, encodeURIComponent(String(orgName)))
                .replace(`{${"envName"}}`, encodeURIComponent(String(envName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/x-yaml';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarHeaderParameter['X-Pulumi-Source'] = 'esc-sdk'
            localVarHeaderParameter['User-Agent'] = 'esc-sdk/ts/0.8.3-dev.0'
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EscApi - functional programming interface
 * @export
 */
export const EscApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EscApiAxiosParamCreator(configuration)
    return {
        /**
         * Checks an environment definition for errors
         * @summary Checks an environment definition for errors
         * @param {string} orgName Organization name
         * @param {string} body Environment Yaml content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkEnvironmentYaml(orgName: string, body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckEnvironment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkEnvironmentYaml(orgName, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EscApi.checkEnvironmentYaml']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates an environment in the given org with the given name.
         * @summary Create a new environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEnvironment(orgName: string, envName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEnvironment(orgName, envName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EscApi.createEnvironment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reads the definition for the given environment with static secrets in plaintext
         * @summary Reads the definition for the given environment with static secrets in plaintext
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async decryptEnvironment(orgName: string, envName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.decryptEnvironment(orgName, envName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EscApi.decryptEnvironment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an environment
         * @summary Delete an environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEnvironment(orgName: string, envName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEnvironment(orgName, envName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EscApi.deleteEnvironment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Read an environment
         * @summary Read an environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironment(orgName: string, envName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentDefinition>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvironment(orgName, envName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EscApi.getEnvironment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the ETag for the given environment if it exists.
         * @summary Return an Environment ETag
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironmentETag(orgName: string, envName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvironmentETag(orgName, envName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EscApi.getEnvironmentETag']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List environments in the organization available to the current user
         * @summary List environments in the organization
         * @param {string} orgName Organization name
         * @param {string} [continuationToken] continuation Token from previous query to fetch next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEnvironments(orgName: string, continuationToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgEnvironments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEnvironments(orgName, continuationToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EscApi.listEnvironments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Opens a session the given environment for the indicated duration. This returns a session id that can be used to then read values. The default duration is 1 hour.
         * @summary Open an environment session
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {string} [duration] open duration - A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openEnvironment(orgName: string, envName: string, duration?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpenEnvironment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.openEnvironment(orgName, envName, duration, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EscApi.openEnvironment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reads and decrypts secrets including retrieving dynamic secrets from providers.
         * @summary Read an open environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {string} openSessionID Open session ID returned from environment open
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readOpenEnvironment(orgName: string, envName: string, openSessionID: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readOpenEnvironment(orgName, envName, openSessionID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EscApi.readOpenEnvironment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Reads and decrypts secrets including retrieving dynamic secrets from providers.
         * @summary Read an open environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {string} openSessionID Open session ID returned from environment open
         * @param {string} property Path to a specific property using Pulumi path syntax https://www.pulumi.com/docs/concepts/config/#structured-configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readOpenEnvironmentProperty(orgName: string, envName: string, openSessionID: string, property: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Value>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readOpenEnvironmentProperty(orgName, envName, openSessionID, property, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EscApi.readOpenEnvironmentProperty']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Validates and updates the given environment\'s definition.
         * @summary Update an existing environment with Yaml file
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {string} body Environment Yaml content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnvironmentYaml(orgName: string, envName: string, body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentDiagnostics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnvironmentYaml(orgName, envName, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EscApi.updateEnvironmentYaml']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EscApi - factory interface
 * @export
 */
export const EscApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EscApiFp(configuration)
    return {
        /**
         * Checks an environment definition for errors
         * @summary Checks an environment definition for errors
         * @param {string} orgName Organization name
         * @param {string} body Environment Yaml content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkEnvironmentYaml(orgName: string, body: string, options?: any): AxiosPromise<CheckEnvironment> {
            return localVarFp.checkEnvironmentYaml(orgName, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an environment in the given org with the given name.
         * @summary Create a new environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironment(orgName: string, envName: string, options?: any): AxiosPromise<Error> {
            return localVarFp.createEnvironment(orgName, envName, options).then((request) => request(axios, basePath));
        },
        /**
         * Reads the definition for the given environment with static secrets in plaintext
         * @summary Reads the definition for the given environment with static secrets in plaintext
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decryptEnvironment(orgName: string, envName: string, options?: any): AxiosPromise<EnvironmentDefinition> {
            return localVarFp.decryptEnvironment(orgName, envName, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an environment
         * @summary Delete an environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironment(orgName: string, envName: string, options?: any): AxiosPromise<Error> {
            return localVarFp.deleteEnvironment(orgName, envName, options).then((request) => request(axios, basePath));
        },
        /**
         * Read an environment
         * @summary Read an environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironment(orgName: string, envName: string, options?: any): AxiosPromise<EnvironmentDefinition> {
            return localVarFp.getEnvironment(orgName, envName, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the ETag for the given environment if it exists.
         * @summary Return an Environment ETag
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironmentETag(orgName: string, envName: string, options?: any): AxiosPromise<void> {
            return localVarFp.getEnvironmentETag(orgName, envName, options).then((request) => request(axios, basePath));
        },
        /**
         * List environments in the organization available to the current user
         * @summary List environments in the organization
         * @param {string} orgName Organization name
         * @param {string} [continuationToken] continuation Token from previous query to fetch next page of results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEnvironments(orgName: string, continuationToken?: string, options?: any): AxiosPromise<OrgEnvironments> {
            return localVarFp.listEnvironments(orgName, continuationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Opens a session the given environment for the indicated duration. This returns a session id that can be used to then read values. The default duration is 1 hour.
         * @summary Open an environment session
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {string} [duration] open duration - A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openEnvironment(orgName: string, envName: string, duration?: string, options?: any): AxiosPromise<OpenEnvironment> {
            return localVarFp.openEnvironment(orgName, envName, duration, options).then((request) => request(axios, basePath));
        },
        /**
         * Reads and decrypts secrets including retrieving dynamic secrets from providers.
         * @summary Read an open environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {string} openSessionID Open session ID returned from environment open
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOpenEnvironment(orgName: string, envName: string, openSessionID: string, options?: any): AxiosPromise<Environment> {
            return localVarFp.readOpenEnvironment(orgName, envName, openSessionID, options).then((request) => request(axios, basePath));
        },
        /**
         * Reads and decrypts secrets including retrieving dynamic secrets from providers.
         * @summary Read an open environment
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {string} openSessionID Open session ID returned from environment open
         * @param {string} property Path to a specific property using Pulumi path syntax https://www.pulumi.com/docs/concepts/config/#structured-configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readOpenEnvironmentProperty(orgName: string, envName: string, openSessionID: string, property: string, options?: any): AxiosPromise<Value> {
            return localVarFp.readOpenEnvironmentProperty(orgName, envName, openSessionID, property, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates and updates the given environment\'s definition.
         * @summary Update an existing environment with Yaml file
         * @param {string} orgName Organization name
         * @param {string} envName Environment name
         * @param {string} body Environment Yaml content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentYaml(orgName: string, envName: string, body: string, options?: any): AxiosPromise<EnvironmentDiagnostics> {
            return localVarFp.updateEnvironmentYaml(orgName, envName, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EscApi - object-oriented interface
 * @export
 * @class EscApi
 * @extends {BaseAPI}
 */
export class EscApi extends BaseAPI {
    /**
     * Checks an environment definition for errors
     * @summary Checks an environment definition for errors
     * @param {string} orgName Organization name
     * @param {string} body Environment Yaml content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    public checkEnvironmentYaml(orgName: string, body: string, options?: RawAxiosRequestConfig) {
        return EscApiFp(this.configuration).checkEnvironmentYaml(orgName, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates an environment in the given org with the given name.
     * @summary Create a new environment
     * @param {string} orgName Organization name
     * @param {string} envName Environment name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    public createEnvironment(orgName: string, envName: string, options?: RawAxiosRequestConfig) {
        return EscApiFp(this.configuration).createEnvironment(orgName, envName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reads the definition for the given environment with static secrets in plaintext
     * @summary Reads the definition for the given environment with static secrets in plaintext
     * @param {string} orgName Organization name
     * @param {string} envName Environment name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    public decryptEnvironment(orgName: string, envName: string, options?: RawAxiosRequestConfig) {
        return EscApiFp(this.configuration).decryptEnvironment(orgName, envName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an environment
     * @summary Delete an environment
     * @param {string} orgName Organization name
     * @param {string} envName Environment name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    public deleteEnvironment(orgName: string, envName: string, options?: RawAxiosRequestConfig) {
        return EscApiFp(this.configuration).deleteEnvironment(orgName, envName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Read an environment
     * @summary Read an environment
     * @param {string} orgName Organization name
     * @param {string} envName Environment name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    public getEnvironment(orgName: string, envName: string, options?: RawAxiosRequestConfig) {
        return EscApiFp(this.configuration).getEnvironment(orgName, envName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the ETag for the given environment if it exists.
     * @summary Return an Environment ETag
     * @param {string} orgName Organization name
     * @param {string} envName Environment name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    public getEnvironmentETag(orgName: string, envName: string, options?: RawAxiosRequestConfig) {
        return EscApiFp(this.configuration).getEnvironmentETag(orgName, envName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List environments in the organization available to the current user
     * @summary List environments in the organization
     * @param {string} orgName Organization name
     * @param {string} [continuationToken] continuation Token from previous query to fetch next page of results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    public listEnvironments(orgName: string, continuationToken?: string, options?: RawAxiosRequestConfig) {
        return EscApiFp(this.configuration).listEnvironments(orgName, continuationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Opens a session the given environment for the indicated duration. This returns a session id that can be used to then read values. The default duration is 1 hour.
     * @summary Open an environment session
     * @param {string} orgName Organization name
     * @param {string} envName Environment name
     * @param {string} [duration] open duration - A duration string is a possibly signed sequence of decimal numbers, each with optional fraction and a unit suffix, such as “300ms”, “1.5h” or “2h45m”. Valid time units are “ns”, “us” (or “µs”), “ms”, “s”, “m”, “h”.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    public openEnvironment(orgName: string, envName: string, duration?: string, options?: RawAxiosRequestConfig) {
        return EscApiFp(this.configuration).openEnvironment(orgName, envName, duration, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reads and decrypts secrets including retrieving dynamic secrets from providers.
     * @summary Read an open environment
     * @param {string} orgName Organization name
     * @param {string} envName Environment name
     * @param {string} openSessionID Open session ID returned from environment open
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    public readOpenEnvironment(orgName: string, envName: string, openSessionID: string, options?: RawAxiosRequestConfig) {
        return EscApiFp(this.configuration).readOpenEnvironment(orgName, envName, openSessionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reads and decrypts secrets including retrieving dynamic secrets from providers.
     * @summary Read an open environment
     * @param {string} orgName Organization name
     * @param {string} envName Environment name
     * @param {string} openSessionID Open session ID returned from environment open
     * @param {string} property Path to a specific property using Pulumi path syntax https://www.pulumi.com/docs/concepts/config/#structured-configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    public readOpenEnvironmentProperty(orgName: string, envName: string, openSessionID: string, property: string, options?: RawAxiosRequestConfig) {
        return EscApiFp(this.configuration).readOpenEnvironmentProperty(orgName, envName, openSessionID, property, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validates and updates the given environment\'s definition.
     * @summary Update an existing environment with Yaml file
     * @param {string} orgName Organization name
     * @param {string} envName Environment name
     * @param {string} body Environment Yaml content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EscApi
     */
    public updateEnvironmentYaml(orgName: string, envName: string, body: string, options?: RawAxiosRequestConfig) {
        return EscApiFp(this.configuration).updateEnvironmentYaml(orgName, envName, body, options).then((request) => request(this.axios, this.basePath));
    }
}



