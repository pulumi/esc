// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
)

// checks if the EvaluatedExecutionContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvaluatedExecutionContext{}

// EvaluatedExecutionContext struct for EvaluatedExecutionContext
type EvaluatedExecutionContext struct {
	Properties *map[string]Value `json:"properties,omitempty"`
	Schema interface{} `json:"schema,omitempty"`
}

// NewEvaluatedExecutionContext instantiates a new EvaluatedExecutionContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvaluatedExecutionContext() *EvaluatedExecutionContext {
	this := EvaluatedExecutionContext{}
	return &this
}

// NewEvaluatedExecutionContextWithDefaults instantiates a new EvaluatedExecutionContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvaluatedExecutionContextWithDefaults() *EvaluatedExecutionContext {
	this := EvaluatedExecutionContext{}
	return &this
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *EvaluatedExecutionContext) GetProperties() map[string]Value {
	if o == nil || IsNil(o.Properties) {
		var ret map[string]Value
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvaluatedExecutionContext) GetPropertiesOk() (*map[string]Value, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *EvaluatedExecutionContext) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]Value and assigns it to the Properties field.
func (o *EvaluatedExecutionContext) SetProperties(v map[string]Value) {
	o.Properties = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EvaluatedExecutionContext) GetSchema() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EvaluatedExecutionContext) GetSchemaOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return &o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *EvaluatedExecutionContext) HasSchema() bool {
	if o != nil && IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given interface{} and assigns it to the Schema field.
func (o *EvaluatedExecutionContext) SetSchema(v interface{}) {
	o.Schema = v
}

func (o EvaluatedExecutionContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvaluatedExecutionContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if o.Schema != nil {
		toSerialize["schema"] = o.Schema
	}
	return toSerialize, nil
}

type NullableEvaluatedExecutionContext struct {
	value *EvaluatedExecutionContext
	isSet bool
}

func (v NullableEvaluatedExecutionContext) Get() *EvaluatedExecutionContext {
	return v.value
}

func (v *NullableEvaluatedExecutionContext) Set(val *EvaluatedExecutionContext) {
	v.value = val
	v.isSet = true
}

func (v NullableEvaluatedExecutionContext) IsSet() bool {
	return v.isSet
}

func (v *NullableEvaluatedExecutionContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvaluatedExecutionContext(val *EvaluatedExecutionContext) *NullableEvaluatedExecutionContext {
	return &NullableEvaluatedExecutionContext{value: val, isSet: true}
}

func (v NullableEvaluatedExecutionContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvaluatedExecutionContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


