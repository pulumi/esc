// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
)

// checks if the Trace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Trace{}

// Trace struct for Trace
type Trace struct {
	Def *Range `json:"def,omitempty"`
	Base *Value `json:"base,omitempty"`
}

// NewTrace instantiates a new Trace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrace() *Trace {
	this := Trace{}
	return &this
}

// NewTraceWithDefaults instantiates a new Trace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTraceWithDefaults() *Trace {
	this := Trace{}
	return &this
}

// GetDef returns the Def field value if set, zero value otherwise.
func (o *Trace) GetDef() Range {
	if o == nil || IsNil(o.Def) {
		var ret Range
		return ret
	}
	return *o.Def
}

// GetDefOk returns a tuple with the Def field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trace) GetDefOk() (*Range, bool) {
	if o == nil || IsNil(o.Def) {
		return nil, false
	}
	return o.Def, true
}

// HasDef returns a boolean if a field has been set.
func (o *Trace) HasDef() bool {
	if o != nil && !IsNil(o.Def) {
		return true
	}

	return false
}

// SetDef gets a reference to the given Range and assigns it to the Def field.
func (o *Trace) SetDef(v Range) {
	o.Def = &v
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *Trace) GetBase() Value {
	if o == nil || IsNil(o.Base) {
		var ret Value
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trace) GetBaseOk() (*Value, bool) {
	if o == nil || IsNil(o.Base) {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *Trace) HasBase() bool {
	if o != nil && !IsNil(o.Base) {
		return true
	}

	return false
}

// SetBase gets a reference to the given Value and assigns it to the Base field.
func (o *Trace) SetBase(v Value) {
	o.Base = &v
}

func (o Trace) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Trace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Def) {
		toSerialize["def"] = o.Def
	}
	if !IsNil(o.Base) {
		toSerialize["base"] = o.Base
	}
	return toSerialize, nil
}

type NullableTrace struct {
	value *Trace
	isSet bool
}

func (v NullableTrace) Get() *Trace {
	return v.value
}

func (v *NullableTrace) Set(val *Trace) {
	v.value = val
	v.isSet = true
}

func (v NullableTrace) IsSet() bool {
	return v.isSet
}

func (v *NullableTrace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrace(val *Trace) *NullableTrace {
	return &NullableTrace{value: val, isSet: true}
}

func (v NullableTrace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


