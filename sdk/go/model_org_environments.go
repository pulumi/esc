// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
)

// checks if the OrgEnvironments type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgEnvironments{}

// OrgEnvironments struct for OrgEnvironments
type OrgEnvironments struct {
	Environments []OrgEnvironment `json:"environments,omitempty"`
	NextToken *string `json:"nextToken,omitempty"`
}

// NewOrgEnvironments instantiates a new OrgEnvironments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgEnvironments() *OrgEnvironments {
	this := OrgEnvironments{}
	return &this
}

// NewOrgEnvironmentsWithDefaults instantiates a new OrgEnvironments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgEnvironmentsWithDefaults() *OrgEnvironments {
	this := OrgEnvironments{}
	return &this
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *OrgEnvironments) GetEnvironments() []OrgEnvironment {
	if o == nil || IsNil(o.Environments) {
		var ret []OrgEnvironment
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgEnvironments) GetEnvironmentsOk() ([]OrgEnvironment, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *OrgEnvironments) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []OrgEnvironment and assigns it to the Environments field.
func (o *OrgEnvironments) SetEnvironments(v []OrgEnvironment) {
	o.Environments = v
}

// GetNextToken returns the NextToken field value if set, zero value otherwise.
func (o *OrgEnvironments) GetNextToken() string {
	if o == nil || IsNil(o.NextToken) {
		var ret string
		return ret
	}
	return *o.NextToken
}

// GetNextTokenOk returns a tuple with the NextToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgEnvironments) GetNextTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextToken) {
		return nil, false
	}
	return o.NextToken, true
}

// HasNextToken returns a boolean if a field has been set.
func (o *OrgEnvironments) HasNextToken() bool {
	if o != nil && !IsNil(o.NextToken) {
		return true
	}

	return false
}

// SetNextToken gets a reference to the given string and assigns it to the NextToken field.
func (o *OrgEnvironments) SetNextToken(v string) {
	o.NextToken = &v
}

func (o OrgEnvironments) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgEnvironments) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	if !IsNil(o.NextToken) {
		toSerialize["nextToken"] = o.NextToken
	}
	return toSerialize, nil
}

type NullableOrgEnvironments struct {
	value *OrgEnvironments
	isSet bool
}

func (v NullableOrgEnvironments) Get() *OrgEnvironments {
	return v.value
}

func (v *NullableOrgEnvironments) Set(val *OrgEnvironments) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgEnvironments) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgEnvironments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgEnvironments(val *OrgEnvironments) *NullableOrgEnvironments {
	return &NullableOrgEnvironments{value: val, isSet: true}
}

func (v NullableOrgEnvironments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgEnvironments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


