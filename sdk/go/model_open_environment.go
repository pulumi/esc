// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpenEnvironment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenEnvironment{}

// OpenEnvironment struct for OpenEnvironment
type OpenEnvironment struct {
	// Open environment session identifier
	Id string `json:"id"`
	Diagnostics *EnvironmentDiagnostics `json:"diagnostics,omitempty"`
}

type _OpenEnvironment OpenEnvironment

// NewOpenEnvironment instantiates a new OpenEnvironment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenEnvironment(id string) *OpenEnvironment {
	this := OpenEnvironment{}
	this.Id = id
	return &this
}

// NewOpenEnvironmentWithDefaults instantiates a new OpenEnvironment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenEnvironmentWithDefaults() *OpenEnvironment {
	this := OpenEnvironment{}
	return &this
}

// GetId returns the Id field value
func (o *OpenEnvironment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OpenEnvironment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OpenEnvironment) SetId(v string) {
	o.Id = v
}

// GetDiagnostics returns the Diagnostics field value if set, zero value otherwise.
func (o *OpenEnvironment) GetDiagnostics() EnvironmentDiagnostics {
	if o == nil || IsNil(o.Diagnostics) {
		var ret EnvironmentDiagnostics
		return ret
	}
	return *o.Diagnostics
}

// GetDiagnosticsOk returns a tuple with the Diagnostics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpenEnvironment) GetDiagnosticsOk() (*EnvironmentDiagnostics, bool) {
	if o == nil || IsNil(o.Diagnostics) {
		return nil, false
	}
	return o.Diagnostics, true
}

// HasDiagnostics returns a boolean if a field has been set.
func (o *OpenEnvironment) HasDiagnostics() bool {
	if o != nil && !IsNil(o.Diagnostics) {
		return true
	}

	return false
}

// SetDiagnostics gets a reference to the given EnvironmentDiagnostics and assigns it to the Diagnostics field.
func (o *OpenEnvironment) SetDiagnostics(v EnvironmentDiagnostics) {
	o.Diagnostics = &v
}

func (o OpenEnvironment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenEnvironment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Diagnostics) {
		toSerialize["diagnostics"] = o.Diagnostics
	}
	return toSerialize, nil
}

func (o *OpenEnvironment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpenEnvironment := _OpenEnvironment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpenEnvironment)

	if err != nil {
		return err
	}

	*o = OpenEnvironment(varOpenEnvironment)

	return err
}

type NullableOpenEnvironment struct {
	value *OpenEnvironment
	isSet bool
}

func (v NullableOpenEnvironment) Get() *OpenEnvironment {
	return v.value
}

func (v *NullableOpenEnvironment) Set(val *OpenEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenEnvironment(val *OpenEnvironment) *NullableOpenEnvironment {
	return &NullableOpenEnvironment{value: val, isSet: true}
}

func (v NullableOpenEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


