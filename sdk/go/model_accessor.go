// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Accessor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Accessor{}

// Accessor struct for Accessor
type Accessor struct {
	Index *int32 `json:"index,omitempty"`
	Key string `json:"key"`
	Range Range `json:"range"`
}

type _Accessor Accessor

// NewAccessor instantiates a new Accessor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessor(key string, range_ Range) *Accessor {
	this := Accessor{}
	this.Key = key
	this.Range = range_
	return &this
}

// NewAccessorWithDefaults instantiates a new Accessor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessorWithDefaults() *Accessor {
	this := Accessor{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *Accessor) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Accessor) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *Accessor) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *Accessor) SetIndex(v int32) {
	o.Index = &v
}

// GetKey returns the Key field value
func (o *Accessor) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *Accessor) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *Accessor) SetKey(v string) {
	o.Key = v
}

// GetRange returns the Range field value
func (o *Accessor) GetRange() Range {
	if o == nil {
		var ret Range
		return ret
	}

	return o.Range
}

// GetRangeOk returns a tuple with the Range field value
// and a boolean to check if the value has been set.
func (o *Accessor) GetRangeOk() (*Range, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Range, true
}

// SetRange sets field value
func (o *Accessor) SetRange(v Range) {
	o.Range = v
}

func (o Accessor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Accessor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	toSerialize["key"] = o.Key
	toSerialize["range"] = o.Range
	return toSerialize, nil
}

func (o *Accessor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"range",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessor := _Accessor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccessor)

	if err != nil {
		return err
	}

	*o = Accessor(varAccessor)

	return err
}

type NullableAccessor struct {
	value *Accessor
	isSet bool
}

func (v NullableAccessor) Get() *Accessor {
	return v.value
}

func (v *NullableAccessor) Set(val *Accessor) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessor) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessor(val *Accessor) *NullableAccessor {
	return &NullableAccessor{value: val, isSet: true}
}

func (v NullableAccessor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


