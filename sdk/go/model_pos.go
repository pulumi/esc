// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Pos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Pos{}

// Pos struct for Pos
type Pos struct {
	// Line is the source code line where this position points. Lines are counted starting at 1 and incremented for each newline character encountered.
	Line int32 `json:"line"`
	// Column is the source code column where this position points. Columns are counted in visual cells starting at 1, and are incremented roughly per grapheme cluster encountered.
	Column int32 `json:"column"`
	// Byte is the byte offset into the file where the indicated position begins.
	Byte int32 `json:"byte"`
}

type _Pos Pos

// NewPos instantiates a new Pos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPos(line int32, column int32, byte_ int32) *Pos {
	this := Pos{}
	this.Line = line
	this.Column = column
	this.Byte = byte_
	return &this
}

// NewPosWithDefaults instantiates a new Pos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPosWithDefaults() *Pos {
	this := Pos{}
	return &this
}

// GetLine returns the Line field value
func (o *Pos) GetLine() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Line
}

// GetLineOk returns a tuple with the Line field value
// and a boolean to check if the value has been set.
func (o *Pos) GetLineOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Line, true
}

// SetLine sets field value
func (o *Pos) SetLine(v int32) {
	o.Line = v
}

// GetColumn returns the Column field value
func (o *Pos) GetColumn() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Column
}

// GetColumnOk returns a tuple with the Column field value
// and a boolean to check if the value has been set.
func (o *Pos) GetColumnOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Column, true
}

// SetColumn sets field value
func (o *Pos) SetColumn(v int32) {
	o.Column = v
}

// GetByte returns the Byte field value
func (o *Pos) GetByte() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Byte
}

// GetByteOk returns a tuple with the Byte field value
// and a boolean to check if the value has been set.
func (o *Pos) GetByteOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Byte, true
}

// SetByte sets field value
func (o *Pos) SetByte(v int32) {
	o.Byte = v
}

func (o Pos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Pos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["line"] = o.Line
	toSerialize["column"] = o.Column
	toSerialize["byte"] = o.Byte
	return toSerialize, nil
}

func (o *Pos) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"line",
		"column",
		"byte",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPos := _Pos{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPos)

	if err != nil {
		return err
	}

	*o = Pos(varPos)

	return err
}

type NullablePos struct {
	value *Pos
	isSet bool
}

func (v NullablePos) Get() *Pos {
	return v.value
}

func (v *NullablePos) Set(val *Pos) {
	v.value = val
	v.isSet = true
}

func (v NullablePos) IsSet() bool {
	return v.isSet
}

func (v *NullablePos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePos(val *Pos) *NullablePos {
	return &NullablePos{value: val, isSet: true}
}

func (v NullablePos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


