// Copyright 2024, Pulumi Corporation.  All rights reserved.
/*
ESC (Environments, Secrets, Config) API

Pulumi ESC allows you to compose and manage hierarchical collections of configuration and secrets and consume them in various ways.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package esc_sdk

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExprBuiltin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExprBuiltin{}

// ExprBuiltin struct for ExprBuiltin
type ExprBuiltin struct {
	Name string `json:"name"`
	NameRange *Range `json:"nameRange,omitempty"`
	ArgSchema interface{} `json:"argSchema,omitempty"`
	Arg *Expr `json:"arg,omitempty"`
}

type _ExprBuiltin ExprBuiltin

// NewExprBuiltin instantiates a new ExprBuiltin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExprBuiltin(name string) *ExprBuiltin {
	this := ExprBuiltin{}
	this.Name = name
	return &this
}

// NewExprBuiltinWithDefaults instantiates a new ExprBuiltin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExprBuiltinWithDefaults() *ExprBuiltin {
	this := ExprBuiltin{}
	return &this
}

// GetName returns the Name field value
func (o *ExprBuiltin) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ExprBuiltin) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ExprBuiltin) SetName(v string) {
	o.Name = v
}

// GetNameRange returns the NameRange field value if set, zero value otherwise.
func (o *ExprBuiltin) GetNameRange() Range {
	if o == nil || IsNil(o.NameRange) {
		var ret Range
		return ret
	}
	return *o.NameRange
}

// GetNameRangeOk returns a tuple with the NameRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExprBuiltin) GetNameRangeOk() (*Range, bool) {
	if o == nil || IsNil(o.NameRange) {
		return nil, false
	}
	return o.NameRange, true
}

// HasNameRange returns a boolean if a field has been set.
func (o *ExprBuiltin) HasNameRange() bool {
	if o != nil && !IsNil(o.NameRange) {
		return true
	}

	return false
}

// SetNameRange gets a reference to the given Range and assigns it to the NameRange field.
func (o *ExprBuiltin) SetNameRange(v Range) {
	o.NameRange = &v
}

// GetArgSchema returns the ArgSchema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExprBuiltin) GetArgSchema() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ArgSchema
}

// GetArgSchemaOk returns a tuple with the ArgSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExprBuiltin) GetArgSchemaOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ArgSchema) {
		return nil, false
	}
	return &o.ArgSchema, true
}

// HasArgSchema returns a boolean if a field has been set.
func (o *ExprBuiltin) HasArgSchema() bool {
	if o != nil && IsNil(o.ArgSchema) {
		return true
	}

	return false
}

// SetArgSchema gets a reference to the given interface{} and assigns it to the ArgSchema field.
func (o *ExprBuiltin) SetArgSchema(v interface{}) {
	o.ArgSchema = v
}

// GetArg returns the Arg field value if set, zero value otherwise.
func (o *ExprBuiltin) GetArg() Expr {
	if o == nil || IsNil(o.Arg) {
		var ret Expr
		return ret
	}
	return *o.Arg
}

// GetArgOk returns a tuple with the Arg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExprBuiltin) GetArgOk() (*Expr, bool) {
	if o == nil || IsNil(o.Arg) {
		return nil, false
	}
	return o.Arg, true
}

// HasArg returns a boolean if a field has been set.
func (o *ExprBuiltin) HasArg() bool {
	if o != nil && !IsNil(o.Arg) {
		return true
	}

	return false
}

// SetArg gets a reference to the given Expr and assigns it to the Arg field.
func (o *ExprBuiltin) SetArg(v Expr) {
	o.Arg = &v
}

func (o ExprBuiltin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExprBuiltin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.NameRange) {
		toSerialize["nameRange"] = o.NameRange
	}
	if o.ArgSchema != nil {
		toSerialize["argSchema"] = o.ArgSchema
	}
	if !IsNil(o.Arg) {
		toSerialize["arg"] = o.Arg
	}
	return toSerialize, nil
}

func (o *ExprBuiltin) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExprBuiltin := _ExprBuiltin{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExprBuiltin)

	if err != nil {
		return err
	}

	*o = ExprBuiltin(varExprBuiltin)

	return err
}

type NullableExprBuiltin struct {
	value *ExprBuiltin
	isSet bool
}

func (v NullableExprBuiltin) Get() *ExprBuiltin {
	return v.value
}

func (v *NullableExprBuiltin) Set(val *ExprBuiltin) {
	v.value = val
	v.isSet = true
}

func (v NullableExprBuiltin) IsSet() bool {
	return v.isSet
}

func (v *NullableExprBuiltin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExprBuiltin(val *ExprBuiltin) *NullableExprBuiltin {
	return &NullableExprBuiltin{value: val, isSet: true}
}

func (v NullableExprBuiltin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExprBuiltin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


